package com.rahadyan.atmsimulation.service.impl;

import com.rahadyan.atmsimulation.component.InputHelper;
import com.rahadyan.atmsimulation.domain.Account;
import com.rahadyan.atmsimulation.domain.Menu;
import com.rahadyan.atmsimulation.domain.TransferredAccount;
import com.rahadyan.atmsimulation.dto.AccountRepository;
import com.rahadyan.atmsimulation.dto.Result;
import com.rahadyan.atmsimulation.service.AccountService;
import com.rahadyan.atmsimulation.service.FundTransferService;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.Map;
import java.util.function.Function;

import static java.util.stream.Collectors.joining;

@Service
public class FundTransferServiceImpl implements FundTransferService {

    @Autowired
    private InputHelper inputHelper;

    @Autowired
    private AccountService accountService;

    private Function<Map.Entry, String> extractValue = values -> String.format("%s. %s\n", values.getKey(), values.getValue());
    private Menu                        menu         = new Menu();

    @Override
    public Result<Account> inputTransferedAccount(Account account) {
        Result<Account> result = new Result<>(account, 1, "");
        result.getResult().setTransferredAccount(new TransferredAccount());
        result.getResult().getTransferredAccount().setAccountNumber(inputHelper.prompt("Please enter destination account and press enter to continue or\npress enter to go back to Transaction "));
        if (StringUtils.isBlank(result.getResult().getTransferredAccount().getAccountNumber())) {
            result.setChoose(-1);
            return result;
        }
        result.getResult().getTransferredAccount().setTransferredAmountInString(inputHelper.prompt("Please enter transfer amount and\npress enter to continue or\npress enter to go back to Transaction "));
        if (StringUtils.isBlank(result.getResult().getTransferredAccount().getTransferredAmountInString())) {
            result.setChoose(-1);
            return result;
        }
        inputHelper.prompt("Reference Number: (This is an autogenerated random 6 digits number)\npress enter to continue");
        result.getResult().getTransferredAccount().setReferenceNumber("343256");

        return result;
    }

    @Override
    public Result<Account> isValidData(Account account) {
        Result<Account> result = new Result<>(account, 0, "");
        TransferredAccount transferredAccount = account.getTransferredAccount();
        if (!result.getResult().getAccountNumber().matches("[0-9]+")) {
            result.setMessage("Invalid account");

            return result;
        }
        if (!transferredAccount.getTransferredAmountInString().matches("[0-9]+")) {
            result.setMessage("Invalid amount");

            return result;
        }
        transferredAccount.setTransferredAmount(Integer.parseInt(transferredAccount.getTransferredAmountInString()));
        if (transferredAccount.getTransferredAmount() < 1) {
            result.setMessage("Minimum amount to withdraw is $1");

            return result;
        }
        if (transferredAccount.getTransferredAmount() > 1000) {
            result.setMessage("Maximum amount to withdraw is $1000");

            return result;
        }
        if (account.getBalance() - transferredAccount.getTransferredAmount() < 0) {
            result.setMessage("Insufficient balance $" + account.getBalance());

            return result;
        }

        result.getResult().setTransferredAccount(transferredAccount);

        result.setChoose(1);
        return result;
    }

    public Result<Account> transferAmount(Account account) {
        TransferredAccount transferredAccount = account.getTransferredAccount();
        Result<Account> result = new Result<>(account, 1, "Insufficient balance $" + transferredAccount.getTransferredAmount());

        int remainBalance = account.getBalance() - transferredAccount.getTransferredAmount();
        if (remainBalance < 0) {
            return result;
        }

        account.setBalance(remainBalance);
        AccountRepository.getAccounts().put(account.getAccountNumber(), account);
        Account creditedAccount = AccountRepository.getAccounts().get(account.getTransferredAccount().getAccountNumber());
        creditedAccount.setBalance(transferredAccount.getTransferredAmount() + creditedAccount.getBalance());
        AccountRepository.getAccounts().put(creditedAccount.getAccountNumber(), creditedAccount);

        result.setResult(account);
        result.setChoose(1);

        return result;
    }

    @Override
    public Result<Account> confirmTransaction(Account account) {
        Result<Account> result = new Result<>(account, 2, "");
        TransferredAccount transferredAccount = account.getTransferredAccount();
        final String text = String.format(
                "Transfer Confirmation\nDestination Account: %s\nTransfer Amount : %s\n Reference Number : %s\n%s\nChoose Options[2]",
                transferredAccount.getAccountNumber(),
                transferredAccount.getTransferredAmount(),
                transferredAccount.getReferenceNumber(),
                menu.getFundTransferComfirmationOption().entrySet().stream()
                        .map(extractValue).collect(joining("")));

        String chooseInString = inputHelper.prompt(text);

        if (StringUtils.isNotBlank(chooseInString))
            result.setChoose(Integer.parseInt(chooseInString));


        return result;
    }
}
